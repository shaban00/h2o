name: Deploy to ECS Staging

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    name: Build & Deploy to ECS with Maintenance Mode
    runs-on: ubuntu-latest

    env:
      LOAD_BALANCER: ${{ secrets.STAGING_LOAD_BALANCER }}
      TARGET_GROUP: ${{ secrets.STAGING_TARGET_GROUP }}
      MAINTENANCE_TARGET_GROUP: ${{ secrets.STAGING_MAINTENANCE_TARGET_GROUP }}
      ECR_REPOSITORY: ${{ secrets.STAGING_ECR_REPOSITORY }}
      IMAGE_TAG: latest
      TASK_DEFINITION_FAMILY: ${{ secrets.STAGING_TASK_DEFINITION_FAMILY }}
      CONTAINER_NAME: ${{ secrets.STAGING_CONTAINER_NAME }}
      ECS_CLUSTER: ${{ secrets.STAGING_ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.STAGING_ECS_SERVICE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.STAGING_AWS_REGION }}

      - name: Put site into Maintenance mode
        run: |
          aws elbv2 modify-listener \
            --listener-arn $(aws elbv2 describe-listeners --load-balancer-arn $(aws elbv2 describe-load-balancers --names $LOAD_BALANCER --query "LoadBalancers[0].LoadBalancerArn" --output text) --query "Listeners[?Protocol=='HTTPS'].ListenerArn" --output text) \
            --default-actions "Type=forward,ForwardConfig={TargetGroups=[{TargetGroupArn=$(aws elbv2 describe-target-groups --names $TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text),Weight=0},{TargetGroupArn=$(aws elbv2 describe-target-groups --names $MAINTENANCE_TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text),Weight=100}]}" \
            > /dev/null 2>&1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create new ECS task definition
        run: |
          # Get the existing task definition
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query "taskDefinition" > task-definition.json

          # Clean up the JSON by removing invalid fields
          jq 'del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy, .compatibilities, .requiresAttributes)' task-definition.json > new-task-def.json

          # Update the image and container name, and write output to updated-task-def.json
          jq --arg IMAGE "${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:$IMAGE_TAG" --arg CONTAINER_NAME "$CONTAINER_NAME" \
            '.containerDefinitions[].image = $IMAGE | .containerDefinitions[].name = $CONTAINER_NAME' new-task-def.json > updated-task-def.json

      - name: Register new ECS task definition
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json \
            --query "taskDefinition.taskDefinitionArn" --output text)

          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment \
            > /dev/null 2>&1

      # - name: Wait for ECS task to be running and execute migration
      #   run: |
      #     NEW_TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --desired-status RUNNING --query "taskArns[0]" --output text)
          
      #     aws ecs wait tasks-running --cluster $ECS_CLUSTER --tasks $NEW_TASK_ARN

      #     # Wait 15 seconds to ensure the task is fully ready
      #     sleep 15

      #     # Execute Django migration command on the new task
      #     aws ecs execute-command \
      #       --cluster $ECS_CLUSTER \
      #       --task $NEW_TASK_ARN \
      #       --container $CONTAINER_NAME \
      #       --interactive \
      #       --command "python manage.py migrate" \
      #       > /dev/null 2>&1

      #     # Run custom commands to refresh search and FTS indexes
      #     aws ecs execute-command \
      #       --cluster $ECS_CLUSTER \
      #       --task $NEW_TASK_ARN \
      #       --container $CONTAINER_NAME \
      #       --interactive \
      #       --command "invoke refresh-search-index && invoke refresh-fts-index" \
      #       > /dev/null 2>&1

      - name: Wait for ECS task to be running and execute migration
        run: |
          # Get the current task definition ARN used by the ECS service
          CURRENT_TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query "services[0].taskDefinition" --output text)

          # Get the new task definition ARN that was just registered
          NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN

          # Check if the task definition has changed (i.e., the update was successful)
          if [[ "$CURRENT_TASK_DEF_ARN" != "$NEW_TASK_DEF_ARN" ]]; then
            echo "Task definition has been updated. Waiting for the new task to start."

            # Get the task ARN of the newly started task
            NEW_TASK_ARN=$(aws ecs list-tasks \
              --cluster $ECS_CLUSTER \
              --service-name $ECS_SERVICE \
              --desired-status RUNNING \
              --family $NEW_TASK_DEF_ARN \
              --query "taskArns[0]" \
              --output text)

            # Wait until the new task is running
            aws ecs wait tasks-running --cluster $ECS_CLUSTER --tasks $NEW_TASK_ARN

            # Wait 15 seconds to ensure the task is fully ready
            sleep 15

            # Execute Django migration command on the new task
            aws ecs execute-command \
              --cluster $ECS_CLUSTER \
              --task $NEW_TASK_ARN \
              --container $CONTAINER_NAME \
              --interactive \
              --command "python manage.py migrate" \
              > /dev/null 2>&1

            # Run custom commands to refresh search and FTS indexes
            aws ecs execute-command \
              --cluster $ECS_CLUSTER \
              --task $NEW_TASK_ARN \
              --container $CONTAINER_NAME \
              --interactive \
              --command "invoke refresh-search-index && invoke refresh-fts-index" \
              > /dev/null 2>&1
          else
            echo "No task definition change detected, skipping task waiting."
          fi


      - name: Turn off Maintenance mode
        run: |
          aws elbv2 modify-listener \
            --listener-arn $(aws elbv2 describe-listeners --load-balancer-arn $(aws elbv2 describe-load-balancers --names $LOAD_BALANCER --query "LoadBalancers[0].LoadBalancerArn" --output text) --query "Listeners[?Protocol=='HTTPS'].ListenerArn" --output text) \
            --default-actions "Type=forward,ForwardConfig={TargetGroups=[{TargetGroupArn=$(aws elbv2 describe-target-groups --names $TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text),Weight=100},{TargetGroupArn=$(aws elbv2 describe-target-groups --names $MAINTENANCE_TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text),Weight=0}]}" \
            > /dev/null 2>&1